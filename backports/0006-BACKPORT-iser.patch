From: Vladimir Sokolovsky <vlad@mellanox.com>
Subject: [PATCH] BACKPORT: iser

Signed-off-by: Vladimir Sokolovsky <vlad@mellanox.com>
Signed-off-by: Sagi Grimberg <sagig@mellanox.com>
Signed-off-by: Roi Dayan <roid@mellanox.com>
---
 drivers/infiniband/ulp/iser/iscsi_iser.c     |   71 +++++++++++++++-
 drivers/infiniband/ulp/iser/iscsi_iser.h     |   62 ++++++++++++++
 drivers/infiniband/ulp/iser/iser_initiator.c |   62 ++++++++++++++
 drivers/infiniband/ulp/iser/iser_memory.c    |  115 ++++++++++++++++++++++++++
 drivers/infiniband/ulp/iser/iser_verbs.c     |   49 +++++++++++
 5 files changed, 357 insertions(+), 2 deletions(-)

--- a/drivers/infiniband/ulp/iser/iscsi_iser.c
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.c
@@ -97,6 +97,7 @@ unsigned int iser_max_sectors = ISER_DEF
 module_param_named(max_sectors, iser_max_sectors, uint, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(max_sectors, "Max number of sectors in a single scsi command (default:1024");
 
+#if defined(HAVE_IB_SIGNATURE)
 bool iser_pi_enable = false;
 module_param_named(pi_enable, iser_pi_enable, bool, S_IRUGO);
 MODULE_PARM_DESC(pi_enable, "Enable T10-PI offload support (default:disabled)");
@@ -104,6 +105,7 @@ MODULE_PARM_DESC(pi_enable, "Enable T10-
 int iser_pi_guard = 1;
 module_param_named(pi_guard, iser_pi_guard, int, S_IRUGO);
 MODULE_PARM_DESC(pi_guard, "T10-PI guard_type, 0:CRC|1:IP_CSUM (default:IP_CSUM)");
+#endif
 
 /*
  * iscsi_iser_recv() - Process a successfull recv completion
@@ -416,6 +418,8 @@ static void iscsi_iser_cleanup_task(stru
 	}
 }
 
+
+#ifdef HAVE_ISCSI_CHECK_PROTECTION
 /**
  * iscsi_iser_check_protection() - check protection information status of task.
  * @task:     iscsi task
@@ -440,6 +444,7 @@ iscsi_iser_check_protection(struct iscsi
 		return iser_check_task_pi_status(iser_task, ISER_DIR_OUT,
 						 sector);
 }
+#endif
 
 /**
  * iscsi_iser_conn_create() - create a new iscsi-iser connection
@@ -606,6 +611,7 @@ iscsi_iser_session_destroy(struct iscsi_
 	iscsi_host_free(shost);
 }
 
+#if defined(HAVE_IB_SIGNATURE)
 static inline unsigned int
 iser_dif_prot_caps(int prot_caps)
 {
@@ -616,6 +622,7 @@ iser_dif_prot_caps(int prot_caps)
 	       ((prot_caps & IB_PROT_T10DIF_TYPE_3) ? SHOST_DIF_TYPE3_PROTECTION |
 						      SHOST_DIX_TYPE3_PROTECTION : 0);
 }
+#endif
 
 /**
  * iscsi_iser_session_create() - create an iscsi-iser session
@@ -668,6 +675,7 @@ iscsi_iser_session_create(struct iscsi_e
 		}
 
 		ib_conn = &iser_conn->ib_conn;
+#if defined(HAVE_IB_SIGNATURE)
 		if (ib_conn->pi_support) {
 			u32 sig_caps = ib_conn->device->dev_attr.sig_prot_cap;
 
@@ -677,6 +685,7 @@ iscsi_iser_session_create(struct iscsi_e
 			else
 				scsi_host_set_guard(shost, SHOST_DIX_GUARD_CRC);
 		}
+#endif
 
 		if (iscsi_host_add(shost,
 				   ib_conn->device->ib_device->dma_device)) {
@@ -791,6 +800,7 @@ iscsi_iser_conn_get_stats(struct iscsi_c
 	stats->custom[3].value = conn->fmr_unalign_cnt;
 }
 
+#ifdef HAVE_ISCSI_GET_EP_PARAM
 static int iscsi_iser_get_ep_param(struct iscsi_endpoint *ep,
 				   enum iscsi_param param, char *buf)
 {
@@ -816,6 +826,7 @@ static int iscsi_iser_get_ep_param(struc
 
 	return len;
 }
+#endif
 
 /**
  * iscsi_iser_ep_connect() - Initiate iSER connection establishment
@@ -943,7 +954,12 @@ iscsi_iser_ep_disconnect(struct iscsi_en
 	iscsi_destroy_endpoint(ep);
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
 static umode_t iser_attr_is_visible(int param_type, int param)
+#elif defined(HAVE_ISCSI_ATTR_IS_VISIBLE)
+static mode_t iser_attr_is_visible(int param_type, int param)
+#endif
+#ifdef HAVE_ISCSI_ATTR_IS_VISIBLE
 {
 	switch (param_type) {
 	case ISCSI_HOST_PARAM:
@@ -987,7 +1003,9 @@ static umode_t iser_attr_is_visible(int
 		case ISCSI_PARAM_TGT_RESET_TMO:
 		case ISCSI_PARAM_IFACE_NAME:
 		case ISCSI_PARAM_INITIATOR_NAME:
+#if defined(CONFIG_ISER_DISCOVERY)
 		case ISCSI_PARAM_DISCOVERY_SESS:
+#endif
 			return S_IRUGO;
 		default:
 			return 0;
@@ -996,29 +1014,70 @@ static umode_t iser_attr_is_visible(int
 
 	return 0;
 }
+#endif
 
 static struct scsi_host_template iscsi_iser_sht = {
 	.module                 = THIS_MODULE,
 	.name                   = "iSCSI Initiator over iSER",
 	.queuecommand           = iscsi_queuecommand,
+#ifdef CONFIG_COMPAT_IS_ISCSI_CHANGE_QUEUE_DEPTH
+	.change_queue_depth	= iscsi_change_queue_depth,
+#else
 	.change_queue_depth	= scsi_change_queue_depth,
+#endif
 	.sg_tablesize           = ISCSI_ISER_DEF_SG_TABLESIZE,
 	.max_sectors            = ISER_DEF_MAX_SECTORS,
 	.cmd_per_lun            = ISER_DEF_CMD_PER_LUN,
 	.eh_abort_handler       = iscsi_eh_abort,
 	.eh_device_reset_handler= iscsi_eh_device_reset,
+#if defined(CONFIG_COMPAT_ISCSI_EH_TARGET_RESET)
+	.eh_target_reset_handler = iscsi_eh_target_reset,
+#else
 	.eh_target_reset_handler = iscsi_eh_recover_target,
+#endif
 	.target_alloc		= iscsi_target_alloc,
 	.use_clustering         = DISABLE_CLUSTERING,
 	.proc_name              = "iscsi_iser",
 	.this_id                = -1,
+#ifndef CONFIG_COMPAT_IS_ISCSI_CHANGE_QUEUE_DEPTH
 	.track_queue_depth	= 1,
+#endif
 };
 
 static struct iscsi_transport iscsi_iser_transport = {
 	.owner                  = THIS_MODULE,
 	.name                   = "iser",
+#if defined(CONFIG_ISER_DISCOVERY)
 	.caps                   = CAP_RECOVERY_L0 | CAP_MULTI_R2T | CAP_TEXT_NEGO,
+#else
+	.caps                   = CAP_RECOVERY_L0 | CAP_MULTI_R2T,
+#endif
+#if defined(CONFIG_COMPAT_ISCSI_TRANSPORT_PARAM_MASK)
+        .param_mask             = ISCSI_MAX_RECV_DLENGTH |
+                                  ISCSI_MAX_XMIT_DLENGTH |
+                                  ISCSI_HDRDGST_EN |
+                                  ISCSI_DATADGST_EN |
+                                  ISCSI_INITIAL_R2T_EN |
+                                  ISCSI_MAX_R2T |
+                                  ISCSI_IMM_DATA_EN |
+                                  ISCSI_FIRST_BURST |
+                                  ISCSI_MAX_BURST |
+                                  ISCSI_PDU_INORDER_EN |
+                                  ISCSI_DATASEQ_INORDER_EN |
+                                  ISCSI_EXP_STATSN |
+                                  ISCSI_PERSISTENT_PORT |
+                                  ISCSI_PERSISTENT_ADDRESS |
+                                  ISCSI_TARGET_NAME | ISCSI_TPGT |
+                                  ISCSI_USERNAME | ISCSI_PASSWORD |
+                                  ISCSI_USERNAME_IN | ISCSI_PASSWORD_IN |
+                                  ISCSI_FAST_ABORT | ISCSI_ABORT_TMO |
+                                  ISCSI_LU_RESET_TMO | ISCSI_TGT_RESET_TMO |
+                                  ISCSI_PING_TMO | ISCSI_RECV_TMO |
+                                  ISCSI_IFACE_NAME | ISCSI_INITIATOR_NAME,
+        .host_param_mask        = ISCSI_HOST_HWADDRESS |
+                                  ISCSI_HOST_NETDEV_NAME |
+                                  ISCSI_HOST_INITIATOR_NAME,
+#endif
 	/* session management */
 	.create_session         = iscsi_iser_session_create,
 	.destroy_session        = iscsi_iser_session_destroy,
@@ -1026,10 +1085,14 @@ static struct iscsi_transport iscsi_iser
 	.create_conn            = iscsi_iser_conn_create,
 	.bind_conn              = iscsi_iser_conn_bind,
 	.destroy_conn           = iscsi_conn_teardown,
-	.attr_is_visible	= iser_attr_is_visible,
+#ifdef HAVE_ISCSI_ATTR_IS_VISIBLE
+ 	.attr_is_visible	= iser_attr_is_visible,
+#endif
 	.set_param              = iscsi_iser_set_param,
 	.get_conn_param		= iscsi_conn_get_param,
-	.get_ep_param		= iscsi_iser_get_ep_param,
+#ifdef HAVE_ISCSI_GET_EP_PARAM
+ 	.get_ep_param		= iscsi_iser_get_ep_param,
+#endif
 	.get_session_param	= iscsi_session_get_param,
 	.start_conn             = iscsi_iser_conn_start,
 	.stop_conn              = iscsi_iser_conn_stop,
@@ -1043,7 +1106,9 @@ static struct iscsi_transport iscsi_iser
 	.xmit_task		= iscsi_iser_task_xmit,
 	.cleanup_task		= iscsi_iser_cleanup_task,
 	.alloc_pdu		= iscsi_iser_pdu_alloc,
+#ifdef HAVE_ISCSI_CHECK_PROTECTION
 	.check_protection	= iscsi_iser_check_protection,
+#endif
 	/* recovery */
 	.session_recovery_timedout = iscsi_session_recovery_timedout,
 
@@ -1063,10 +1128,12 @@ static int __init iser_init(void)
 		return -EINVAL;
 	}
 
+#if defined(HAVE_IB_SIGNATURE)
 	if (iser_pi_guard < 0 || iser_pi_guard > 1) {
 		iser_err("Invalid pi_guard value of %d\n", iser_pi_guard);
 		return -EINVAL;
 	}
+#endif
 
 	memset(&ig, 0, sizeof(struct iser_global));
 
--- a/drivers/infiniband/ulp/iser/iscsi_iser.h
+++ b/drivers/infiniband/ulp/iser/iscsi_iser.h
@@ -41,6 +41,7 @@
 #ifndef __ISCSI_ISER_H__
 #define __ISCSI_ISER_H__
 
+#include <linux/version.h>
 #include <linux/types.h>
 #include <linux/net.h>
 #include <linux/printk.h>
@@ -72,6 +73,61 @@
 #define PFX		DRV_NAME ": "
 #define DRV_VER		"1.7.0"
 
+#if !defined(HAVE_ISCSI_GET_EP_PARAM)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39)
+#define HAVE_ISCSI_GET_EP_PARAM
+#endif
+#endif
+
+#if !defined(HAVE_ISCSI_SCSI_REQ)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0)
+#define HAVE_ISCSI_SCSI_REQ
+#endif
+#endif
+
+#if !defined(CONFIG_COMPAT_IS_REINIT_COMPLETION)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,13,0)
+#define CONFIG_COMPAT_IS_REINIT_COMPLETION
+#endif
+#endif
+
+#if !defined(HAVE_ISCSI_ATTR_IS_VISIBLE)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
+#define HAVE_ISCSI_ATTR_IS_VISIBLE
+#endif
+#endif
+
+#if !defined(HAVE_SCSI_PROT_INTERVAL)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,18,0)
+#define HAVE_SCSI_PROT_INTERVAL
+#endif
+#endif
+
+#ifndef CONFIG_COMPAT_IS_REINIT_COMPLETION
+static inline void reinit_completion(struct completion *x)
+{
+	x->done = 0;
+}
+#endif
+
+#ifndef HAVE_SCSI_TRANSFER_LENGTH
+static inline unsigned scsi_transfer_length(struct scsi_cmnd *scmd)
+{
+	unsigned int xfer_len = scsi_bufflen(scmd);
+	unsigned int prot_op = scsi_get_prot_op(scmd);
+	unsigned int sector_size = scmd->device->sector_size;
+
+	switch (prot_op) {
+	case SCSI_PROT_NORMAL:
+	case SCSI_PROT_WRITE_STRIP:
+	case SCSI_PROT_READ_INSERT:
+		return xfer_len;
+	}
+
+	return xfer_len + (xfer_len >> ilog2(sector_size)) * 8;
+}
+#endif
+
 #define iser_dbg(fmt, arg...)				 \
 	do {						 \
 		if (unlikely(iser_debug_level > 2))	 \
@@ -306,7 +362,9 @@ struct iser_tx_desc {
 	struct ib_send_wr            wrs[ISER_MAX_WRS];
 	struct iser_mem_reg          data_reg;
 	struct iser_mem_reg          prot_reg;
+#if defined(HAVE_IB_SIGNATURE)
 	struct ib_sig_attrs          sig_attrs;
+#endif /* HAVE_IB_SIGNATURE */
 };
 
 #define ISER_RX_PAD_SIZE	(256 - (ISER_RX_PAYLOAD_SIZE + \
@@ -452,7 +510,9 @@ struct iser_pi_context {
 	struct iser_reg_resources       rsc;
 	struct ib_mr                   *sig_mr;
 	u8                              sig_mr_valid:1;
+#if defined(HAVE_IB_SIGNATURE)
 	u8                              sig_protected:1;
+#endif /* HAVE_IB_SIGNATURE */
 };
 
 /**
@@ -701,8 +761,10 @@ int iser_alloc_fastreg_pool(struct ib_co
 			    unsigned cmds_max,
 			    unsigned int size);
 void iser_free_fastreg_pool(struct ib_conn *ib_conn);
+#ifdef HAVE_IB_SIGNATURE
 u8 iser_check_task_pi_status(struct iscsi_iser_task *iser_task,
 			     enum iser_data_dir cmd_dir, sector_t *sector);
+#endif /* HAVE_IB_SIGNATURE */
 struct iser_fr_desc *
 iser_reg_desc_get_fr(struct ib_conn *ib_conn);
 void
--- a/drivers/infiniband/ulp/iser/iser_initiator.c
+++ b/drivers/infiniband/ulp/iser/iser_initiator.c
@@ -332,7 +332,9 @@ static int iser_post_rx_bufs(struct iscs
 {
 	struct iser_conn *iser_conn = conn->dd_data;
 	struct ib_conn *ib_conn = &iser_conn->ib_conn;
+#if defined(CONFIG_ISER_DISCOVERY)
 	struct iscsi_session *session = conn->session;
+#endif
 
 	iser_dbg("req op %x flags %x\n", req->opcode, req->flags);
 	/* check if this is the last login - going to full feature phase */
@@ -345,12 +347,14 @@ static int iser_post_rx_bufs(struct iscs
 	 */
 	WARN_ON(ib_conn->post_recv_buf_count != 1);
 
+#if defined(CONFIG_ISER_DISCOVERY)
 	if (session->discovery_sess) {
 		iser_info("Discovery session, re-using login RX buffer\n");
 		return 0;
 	} else
 		iser_info("Normal session, posting batch of RX %d buffers\n",
 			  iser_conn->min_posted_rx);
+#endif
 
 	/* Initial post receive buffers */
 	if (iser_post_recvm(iser_conn, iser_conn->min_posted_rx))
@@ -375,12 +379,20 @@ int iser_send_command(struct iscsi_conn
 	unsigned long edtl;
 	int err;
 	struct iser_data_buf *data_buf, *prot_buf;
+#ifdef HAVE_ISCSI_SCSI_REQ
 	struct iscsi_scsi_req *hdr = (struct iscsi_scsi_req *)task->hdr;
+#else
+	struct iscsi_cmd *hdr =  (struct iscsi_cmd *)task->hdr;
+#endif
 	struct scsi_cmnd *sc  =  task->sc;
 	struct iser_tx_desc *tx_desc = &iser_task->desc;
 	u8 sig_count = ++iser_conn->ib_conn.sig_count;
 
 	edtl = ntohl(hdr->data_length);
+ 	if (scsi_get_prot_op(sc) != SCSI_PROT_NORMAL) {
+		edtl = scsi_transfer_length(sc);
+ 		hdr->data_length = cpu_to_be32(edtl);
+ 	}
 
 	/* build the tx desc regd header and add it to the tx desc dto */
 	tx_desc->type = ISCSI_TX_SCSI_COMMAND;
@@ -587,6 +599,48 @@ send_control_error:
 	return err;
 }
 
+#ifdef HAVE_IB_SIGNATURE
+#ifndef HAVE_ISCSI_CHECK_PROTECTION
+static void iser_check_protection(struct iscsi_conn *conn,
+				  struct iscsi_hdr *hdr)
+{
+	struct iscsi_task *task;
+	struct iscsi_iser_task *iser_task;
+	struct scsi_cmnd *sc;
+	enum iser_data_dir dir;
+	sector_t sector;
+	u8 ascq;
+
+#ifndef CONFIG_COMPAT_ISCSI_SESSION_FRWD_LOCK
+	spin_lock(&conn->session->lock);
+	task = iscsi_itt_to_ctask(conn, hdr->itt);
+	spin_unlock(&conn->session->lock);
+#else
+	spin_lock(&conn->session->back_lock);
+	task = iscsi_itt_to_ctask(conn, hdr->itt);
+	spin_unlock(&conn->session->back_lock);
+#endif
+	sc = task->sc;
+	iser_task = task->dd_data;
+
+	dir = iser_task->dir[ISER_DIR_IN] ? ISER_DIR_IN : ISER_DIR_OUT;
+	ascq = iser_check_task_pi_status(iser_task, dir, &sector);
+	if (ascq) {
+		sc->result = DRIVER_SENSE << 24 | DID_ABORT << 16 |
+			     SAM_STAT_CHECK_CONDITION;
+		scsi_build_sense_buffer(1, sc->sense_buffer,
+					ILLEGAL_REQUEST, 0x10, ascq);
+		sc->sense_buffer[7] = 0xc; /* Additional sense length */
+		sc->sense_buffer[8] = 0;   /* Information desc type */
+		sc->sense_buffer[9] = 0xa; /* Additional desc length */
+		sc->sense_buffer[10] = 0x80; /* Validity bit */
+
+		put_unaligned_be64(sector, &sc->sense_buffer[12]);
+	}
+}
+#endif
+#endif
+
 /**
  * iser_rcv_dto_completion - recv DTO completion
  */
@@ -617,6 +671,14 @@ void iser_rcv_completion(struct iser_rx_
 	iser_dbg("op 0x%x itt 0x%x dlen %d\n", hdr->opcode,
 			hdr->itt, (int)(rx_xfer_len - ISER_HEADERS_LEN));
 
+#ifdef HAVE_IB_SIGNATURE
+#ifndef HAVE_ISCSI_CHECK_PROTECTION
+	if (hdr->opcode == ISCSI_OP_SCSI_CMD_RSP &&
+	    ib_conn->pi_support)
+		iser_check_protection(iser_conn->iscsi_conn, hdr);
+#endif
+#endif
+
 	iscsi_iser_recv(iser_conn->iscsi_conn, hdr, rx_desc->data,
 			rx_xfer_len - ISER_HEADERS_LEN);
 
--- a/drivers/infiniband/ulp/iser/iser_memory.c
+++ b/drivers/infiniband/ulp/iser/iser_memory.c
@@ -167,18 +167,30 @@ iser_copy_bounce(struct iser_data_buf *d
 	for_each_sg(data->orig_sg, osg, data->orig_size, i) {
 		unsigned int copy_len, osg_off = 0;
 
+#if  (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
 		oaddr = kmap_atomic(sg_page(osg)) + osg->offset;
+#else
+		oaddr = kmap_atomic(sg_page(osg), KM_USER0) + osg->offset;
+#endif
 		copy_len = min(left, osg->length);
 		while (copy_len) {
 			unsigned int len = min(copy_len, bsg->length - bsg_off);
 
+#if  (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
 			baddr = kmap_atomic(sg_page(bsg)) + bsg->offset;
+#else
+			baddr = kmap_atomic(sg_page(bsg), KM_USER0) + bsg->offset;
+#endif
 			if (to_buffer)
 				memcpy(baddr + bsg_off, oaddr + osg_off, len);
 			else
 				memcpy(oaddr + osg_off, baddr + bsg_off, len);
 
+#if  (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
 			kunmap_atomic(baddr - bsg->offset);
+#else
+			kunmap_atomic(baddr - bsg->offset, KM_USER0);
+#endif
 			osg_off += len;
 			bsg_off += len;
 			copy_len -= len;
@@ -188,7 +200,11 @@ iser_copy_bounce(struct iser_data_buf *d
 				bsg_off = 0;
 			}
 		}
+#if  (LINUX_VERSION_CODE >= KERNEL_VERSION(3,4,0))
 		kunmap_atomic(oaddr - osg->offset);
+#else
+		kunmap_atomic(oaddr - osg->offset, KM_USER0);
+#endif
 		left -= osg_off;
 	}
 }
@@ -608,13 +624,47 @@ iser_unreg_mem_fastreg(struct iscsi_iser
 	reg->mem_h = NULL;
 }
 
+#if defined(HAVE_IB_SIGNATURE)
+#ifndef HAVE_NEW_SIGNATURE_API
+static inline enum ib_t10_dif_type
+scsi2ib_prot_type(unsigned char prot_type)
+{
+	switch (prot_type) {
+	case SCSI_PROT_DIF_TYPE0:
+		return IB_T10DIF_NONE;
+	case SCSI_PROT_DIF_TYPE1:
+		return IB_T10DIF_TYPE1;
+	case SCSI_PROT_DIF_TYPE2:
+		return IB_T10DIF_TYPE2;
+	case SCSI_PROT_DIF_TYPE3:
+		return IB_T10DIF_TYPE3;
+	default:
+		return IB_T10DIF_NONE;
+	}
+}
+#endif
+
 static void
 iser_set_dif_domain(struct scsi_cmnd *sc, struct ib_sig_attrs *sig_attrs,
 		    struct ib_sig_domain *domain)
 {
+#ifndef HAVE_NEW_SIGNATURE_API
+	unsigned char scsi_ptype = scsi_get_prot_type(sc);
+
+	domain->sig.dif.type = scsi2ib_prot_type(scsi_ptype);
+#endif
 	domain->sig_type = IB_SIG_TYPE_T10_DIF;
+
+#ifdef HAVE_SCSI_PROT_INTERVAL
 	domain->sig.dif.pi_interval = scsi_prot_interval(sc);
 	domain->sig.dif.ref_tag = scsi_prot_ref_tag(sc);
+#else
+	domain->sig.dif.pi_interval = sc->device->sector_size;
+	domain->sig.dif.ref_tag = blk_rq_pos(sc->request) >>
+			(ilog2(domain->sig.dif.pi_interval) - 9) & 0xffffffff;
+#endif
+
+#ifdef HAVE_NEW_SIGNATURE_API
 	/*
 	 * At the moment we hard code those, but in the future
 	 * we will take them from sc.
@@ -622,8 +672,14 @@ iser_set_dif_domain(struct scsi_cmnd *sc
 	domain->sig.dif.apptag_check_mask = 0xffff;
 	domain->sig.dif.app_escape = true;
 	domain->sig.dif.ref_escape = true;
+#ifdef HAVE_SCSI_PROT_INTERVAL
 	if (sc->prot_flags & SCSI_PROT_REF_INCREMENT)
+#else
+	if (scsi_get_prot_type(sc) == SCSI_PROT_DIF_TYPE1 ||
+	    scsi_get_prot_type(sc) == SCSI_PROT_DIF_TYPE2)
+#endif
 		domain->sig.dif.ref_remap = true;
+#endif
 };
 
 static int
@@ -632,15 +688,29 @@ iser_set_sig_attrs(struct scsi_cmnd *sc,
 	switch (scsi_get_prot_op(sc)) {
 	case SCSI_PROT_WRITE_INSERT:
 	case SCSI_PROT_READ_STRIP:
+#ifndef HAVE_NEW_SIGNATURE_API
+		sig_attrs->mem.sig_type = IB_SIG_TYPE_T10_DIF;
+		sig_attrs->mem.sig.dif.type = IB_T10DIF_NONE;
+#else
 		sig_attrs->mem.sig_type = IB_SIG_TYPE_NONE;
+#endif
 		iser_set_dif_domain(sc, sig_attrs, &sig_attrs->wire);
 		sig_attrs->wire.sig.dif.bg_type = IB_T10DIF_CRC;
 		break;
 	case SCSI_PROT_READ_INSERT:
 	case SCSI_PROT_WRITE_STRIP:
+#ifndef HAVE_NEW_SIGNATURE_API
+		sig_attrs->wire.sig_type = IB_SIG_TYPE_T10_DIF;
+		sig_attrs->wire.sig.dif.type = IB_T10DIF_NONE;
+#else
 		sig_attrs->wire.sig_type = IB_SIG_TYPE_NONE;
+#endif
 		iser_set_dif_domain(sc, sig_attrs, &sig_attrs->mem);
+#ifdef HAVE_SCSI_PROT_INTERVAL
 		sig_attrs->mem.sig.dif.bg_type = sc->prot_flags & SCSI_PROT_IP_CHECKSUM ?
+#else
+		sig_attrs->mem.sig.dif.bg_type = iser_pi_guard ?
+#endif
 						IB_T10DIF_CSUM : IB_T10DIF_CRC;
 		break;
 	case SCSI_PROT_READ_PASS:
@@ -648,7 +718,11 @@ iser_set_sig_attrs(struct scsi_cmnd *sc,
 		iser_set_dif_domain(sc, sig_attrs, &sig_attrs->wire);
 		sig_attrs->wire.sig.dif.bg_type = IB_T10DIF_CRC;
 		iser_set_dif_domain(sc, sig_attrs, &sig_attrs->mem);
+#ifdef HAVE_SCSI_PROT_INTERVAL
 		sig_attrs->mem.sig.dif.bg_type = sc->prot_flags & SCSI_PROT_IP_CHECKSUM ?
+#else
+		sig_attrs->mem.sig.dif.bg_type = iser_pi_guard ?
+#endif
 						IB_T10DIF_CSUM : IB_T10DIF_CRC;
 		break;
 	default:
@@ -663,12 +737,27 @@ iser_set_sig_attrs(struct scsi_cmnd *sc,
 static inline void
 iser_set_prot_checks(struct scsi_cmnd *sc, u8 *mask)
 {
+#ifdef HAVE_SCSI_PROT_INTERVAL
 	*mask = 0;
 	if (sc->prot_flags & SCSI_PROT_REF_CHECK)
 		*mask |= ISER_CHECK_REFTAG;
 	if (sc->prot_flags & SCSI_PROT_GUARD_CHECK)
 		*mask |= ISER_CHECK_GUARD;
+#else
+	switch (scsi_get_prot_type(sc)) {
+	case SCSI_PROT_DIF_TYPE0:
+		break;
+	case SCSI_PROT_DIF_TYPE1:
+	case SCSI_PROT_DIF_TYPE2:
+		*mask = ISER_CHECK_GUARD | ISER_CHECK_REFTAG;
+		break;
+	case SCSI_PROT_DIF_TYPE3:
+		*mask = ISER_CHECK_GUARD;
+		break;
+	}
+#endif
 }
+#endif /* HAVE_IB_SIGNATURE */
 
 static void
 iser_inv_rkey(struct ib_send_wr *inv_wr, struct ib_mr *mr)
@@ -685,6 +774,7 @@ iser_inv_rkey(struct ib_send_wr *inv_wr,
 	ib_update_fast_reg_key(mr, rkey);
 }
 
+#if defined(HAVE_IB_SIGNATURE)
 static int
 iser_reg_sig_mr(struct iscsi_iser_task *iser_task,
 		struct iser_pi_context *pi_ctx,
@@ -737,6 +827,7 @@ iser_reg_sig_mr(struct iscsi_iser_task *
 err:
 	return ret;
 }
+#endif /* HAVE_IB_SIGNATURE */
 
 static int iser_fast_reg_mr(struct iscsi_iser_task *iser_task,
 			    struct iser_data_buf *mem,
@@ -791,6 +882,7 @@ static int iser_fast_reg_mr(struct iscsi
 	return 0;
 }
 
+#ifdef HAVE_INDIR_REG
 static int
 iser_sg_to_ivec(struct iser_data_buf *mem,
 		struct iser_device *device,
@@ -857,6 +949,7 @@ iser_reg_indir_mem(struct iscsi_iser_tas
 
 	return 0;
 }
+#endif /* HAVE_INDIR_REG */
 
 static int
 iser_handle_unaligned_buf(struct iscsi_iser_task *task,
@@ -870,6 +963,7 @@ iser_handle_unaligned_buf(struct iscsi_i
 	aligned_len = iser_data_buf_aligned_len(mem, device->ib_device,
 						iser_conn->scsi_sg_tablesize);
 	if (aligned_len != mem->dma_nents) {
+#ifdef HAVE_INDIR_REG
 		if (device->dev_attr.device_cap_flags &
 		    IB_DEVICE_INDIR_REGISTRATION) {
 			mem->aligned = false;
@@ -879,14 +973,22 @@ iser_handle_unaligned_buf(struct iscsi_i
 			if (err)
 				return err;
 		}
+#else
+		err = fall_to_bounce_buf(task, mem, dir);
+		if (err)
+			return err;
+#endif /* HAVE_INDIR_REG */
 	}
 
 	mem->aligned = true;
 
+#ifdef HAVE_INDIR_REG
 done:
+#endif /* HAVE_INDIR_REG */
 	return 0;
 }
 
+#if defined(HAVE_IB_SIGNATURE)
 static int
 iser_reg_prot_sg(struct iscsi_iser_task *task,
 		 struct iser_data_buf *mem,
@@ -897,12 +999,18 @@ iser_reg_prot_sg(struct iscsi_iser_task
 
 	if (mem->dma_nents == 1)
 		return iser_reg_dma(device, mem, reg);
+#ifdef HAVE_INDIR_REG
 	else if (mem->aligned)
 		return device->reg_ops->reg_mem(task, mem,
 						&desc->pi_ctx->rsc, reg);
 
 	return iser_reg_indir_mem(task, mem, &desc->pi_ctx->rsc, reg);
+#else
+	return device->reg_ops->reg_mem(task, mem,
+					&desc->pi_ctx->rsc, reg);
+#endif /* HAVE_INDIR_REG */
 }
+#endif
 
 static int
 iser_reg_data_sg(struct iscsi_iser_task *task,
@@ -914,11 +1022,16 @@ iser_reg_data_sg(struct iscsi_iser_task
 
 	if (mem->dma_nents == 1)
 		return iser_reg_dma(device, mem, reg);
+#ifdef HAVE_INDIR_REG
 	else if (mem->aligned)
 		return device->reg_ops->reg_mem(task, mem,
 						&desc->rsc, reg);
 
 	return iser_reg_indir_mem(task, mem, &desc->rsc, reg);
+#else
+	return device->reg_ops->reg_mem(task, mem,
+					&desc->rsc, reg);
+#endif /* HAVE_INDIR_REG */
 }
 
 int iser_reg_rdma_mem(struct iscsi_iser_task *task,
@@ -951,6 +1064,7 @@ int iser_reg_rdma_mem(struct iscsi_iser_
 	if (unlikely(err))
 		goto err_reg;
 
+#if defined(HAVE_IB_SIGNATURE)
 	if (scsi_get_prot_op(task->sc) != SCSI_PROT_NORMAL) {
 		struct iser_mem_reg *prot_reg = &task->desc.prot_reg;
 
@@ -972,6 +1086,7 @@ int iser_reg_rdma_mem(struct iscsi_iser_
 
 		desc->pi_ctx->sig_protected = 1;
 	}
+#endif
 
 	return 0;
 
--- a/drivers/infiniband/ulp/iser/iser_verbs.c
+++ b/drivers/infiniband/ulp/iser/iser_verbs.c
@@ -307,6 +307,7 @@ iser_alloc_reg_res(struct iser_device *d
 	}
 	res->mr_valid = 1;
 
+#ifdef HAVE_INDIR_REG
 	if (device->dev_attr.device_cap_flags & IB_DEVICE_INDIR_REGISTRATION) {
 		struct ib_mr_init_attr mr_attr;
 
@@ -330,13 +331,16 @@ iser_alloc_reg_res(struct iser_device *d
 		}
 		res->indir_mr_valid = 1;
 	}
+#endif /* HAVE_INDIR_REG */
 
 	return 0;
 
+#ifdef HAVE_INDIR_REG
 indir_mr_failure:
 	ib_free_indir_reg_list(res->indir_rl);
 indir_reg_list_failure:
 	ib_dereg_mr(res->mr);
+#endif /* HAVE_INDIR_REG */
 fast_reg_mr_failure:
 	ib_free_fast_reg_page_list(res->frpl);
 
@@ -348,12 +352,15 @@ iser_free_reg_res(struct iser_reg_resour
 {
 	ib_dereg_mr(rsc->mr);
 	ib_free_fast_reg_page_list(rsc->frpl);
+#ifdef HAVE_INDIR_REG
 	if (rsc->indir_mr)
 		ib_dereg_mr(rsc->indir_mr);
 	if (rsc->indir_rl)
 		ib_free_indir_reg_list(rsc->indir_rl);
+#endif /* HAVE_INDIR_REG */
 }
 
+#if defined(HAVE_IB_SIGNATURE)
 static int
 iser_alloc_pi_ctx(struct iser_device *device,
 		  struct ib_pd *pd,
@@ -402,6 +409,7 @@ iser_free_pi_ctx(struct iser_pi_context
 	ib_destroy_mr(pi_ctx->sig_mr);
 	kfree(pi_ctx);
 }
+#endif /* HAVE_IB_SIGNATURE */
 
 
 static struct iser_fr_desc *
@@ -421,16 +429,20 @@ iser_create_fastreg_desc(struct iser_dev
 	if (ret)
 		goto reg_res_alloc_failure;
 
+#if defined(HAVE_IB_SIGNATURE)
 	if (pi_enable) {
 		ret = iser_alloc_pi_ctx(device, pd, desc, size);
 		if (ret)
 			goto pi_ctx_alloc_failure;
 	}
+#endif /* HAVE_IB_SIGNATURE */
 
 	return desc;
 
+#if defined(HAVE_IB_SIGNATURE)
 pi_ctx_alloc_failure:
 	iser_free_reg_res(&desc->rsc);
+#endif /* HAVE_IB_SIGNATURE */
 reg_res_alloc_failure:
 	kfree(desc);
 
@@ -490,8 +502,10 @@ void iser_free_fastreg_pool(struct ib_co
 	list_for_each_entry_safe(desc, tmp, &fr_pool->list, list) {
 		list_del(&desc->list);
 		iser_free_reg_res(&desc->rsc);
+#if defined(HAVE_IB_SIGNATURE)
 		if (desc->pi_ctx)
 			iser_free_pi_ctx(desc->pi_ctx);
+#endif /* HAVE_IB_SIGNATURE */
 		kfree(desc);
 		++i;
 	}
@@ -562,6 +576,7 @@ static int iser_create_ib_conn_res(struc
 	init_attr.cap.max_recv_sge = 1;
 	init_attr.sq_sig_type	= IB_SIGNAL_REQ_WR;
 	init_attr.qp_type	= IB_QPT_RC;
+#if defined(HAVE_IB_SIGNATURE)
 	if (ib_conn->pi_support) {
 		init_attr.cap.max_send_wr = ISER_QP_SIG_MAX_REQ_DTOS + 1;
 		init_attr.create_flags |= IB_QP_CREATE_SIGNATURE_EN;
@@ -581,6 +596,20 @@ static int iser_create_ib_conn_res(struc
 		}
 	}
 
+#else
+	if (dev_attr->max_qp_wr > ISER_QP_MAX_REQ_DTOS) {
+		init_attr.cap.max_send_wr  = ISER_QP_MAX_REQ_DTOS + 1;
+		iser_conn->max_cmds =
+			ISER_GET_MAX_XMIT_CMDS(ISER_QP_MAX_REQ_DTOS);
+	} else {
+		init_attr.cap.max_send_wr = dev_attr->max_qp_wr;
+		iser_conn->max_cmds =
+			ISER_GET_MAX_XMIT_CMDS(dev_attr->max_qp_wr);
+		iser_dbg("device %s supports max_send_wr %d\n",
+			 device->ib_device->name, dev_attr->max_qp_wr);
+	}
+#endif
+
 	ret = rdma_create_qp(ib_conn->cma_id, device->pd, &init_attr);
 	if (ret)
 		goto out_err;
@@ -860,6 +889,7 @@ static void iser_addr_handler(struct rdm
 
 	ib_conn->device = device;
 
+#if defined(HAVE_IB_SIGNATURE)
 	/* connection T10-PI support */
 	if (iser_pi_enable) {
 		if (!(device->dev_attr.device_cap_flags &
@@ -872,6 +902,9 @@ static void iser_addr_handler(struct rdm
 			ib_conn->pi_support = true;
 		}
 	}
+#else
+	ib_conn->pi_support = false;
+#endif /* ! HAVE_IB_SIGNATURE */
 
 	iser_calc_scsi_params(iser_conn, iser_max_sectors);
 
@@ -1056,7 +1089,21 @@ int iser_connect(struct iser_conn   *ise
 
 	mutex_lock(&iser_conn->state_mutex);
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,11,0))
 	sprintf(iser_conn->name, "%pISp", dst_addr);
+#else
+	if (dst_addr->sa_family == AF_INET6) {
+		struct sockaddr_in6 *addr = (struct sockaddr_in6 *) dst_addr;
+		sprintf(iser_conn->name, "[%pI6]:%d",
+			&(addr->sin6_addr),
+			ntohs(addr->sin6_port));
+        } else {
+		struct sockaddr_in *addr = (struct sockaddr_in *) dst_addr;
+		sprintf(iser_conn->name, "%pI4:%d",
+			&(addr->sin_addr.s_addr),
+			ntohs(addr->sin_port));
+	}
+#endif
 
 	iser_info("connecting to: %s\n", iser_conn->name);
 
@@ -1335,6 +1382,7 @@ static void iser_cq_callback(struct ib_c
 	tasklet_schedule(&comp->tasklet);
 }
 
+#ifdef HAVE_IB_SIGNATURE
 u8 iser_check_task_pi_status(struct iscsi_iser_task *iser_task,
 			     enum iser_data_dir cmd_dir, sector_t *sector)
 {
@@ -1382,3 +1430,4 @@ err:
 	/* Not alot we can do here, return ambiguous guard error */
 	return 0x1;
 }
+#endif /* HAVE_IB_SIGNATURE */
